{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["responsesSocket","Rete","Socket","conditionsSocket","logicalAndSocket","combineWith","logicalOrSocket","logicalThenSocket","ReactBaseComponent","props","state","text","onUpdate","undefined","prevProps","prevState","snapshot","this","setState","Fragment","label","className","title","type","value","onClick","e","prompt","React","Component","ReactStartComponent","ReactResponseComponent","ReactSpeechComponent","ReactEndComponent","ReactConditionComponent","conditions","selectedCondition","selectedParam","paramNameValue","paramQtyValue","definitions","name","id","params","values","options","condition","selected","push","filter","f","logics","length","param","onChange","target","ConversationStartControl","emitter","key","render","component","v","putData","Control","ConversationEndControl","ConversationConditionControl","ConversationResponseControl","ConversationSpeechControl","QuestNode","node","bindSocket","bindControl","outputs","controls","inputs","map","output","socket","io","innerRef","control","input","showControl","Node","ConversationStartComponent","data","out","Output","editor","outThen","addControl","addOutput","ConversationEndComponent","Input","inThen","addInput","ConversationConditionsComponent","outAnd","outOr","ConversationResponsesComponent","responses","ConversationSpeechComponent","App","reteRef","createRef","initializeRete","NodeEditor","current","use","ConnectionPlugin","ReactRenderPlugin","startComponent","register","responsesComponent","conditionsComponent","endComponent","speechComponent","engine","Engine","createNode","startNode","addNode","ContextMenuPlugin","searchBar","delay","allocate","items","on","a","console","log","toJSON","export","ref","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e45e0a6c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css'\nimport Rete from \"rete\";\nimport ConnectionPlugin from 'rete-connection-plugin';\nimport ReactRenderPlugin, { Node, Socket, Control } from 'rete-react-render-plugin';\nimport ContextMenuPlugin from 'rete-context-menu-plugin';\n\nconst responsesSocket = new Rete.Socket('Response');\nconst conditionsSocket = new Rete.Socket('Conditions');\nconst logicalAndSocket = new Rete.Socket('LogicalAnd')\nlogicalAndSocket.combineWith(conditionsSocket)\nconst logicalOrSocket = new Rete.Socket('LogicalOr')\nlogicalOrSocket.combineWith(conditionsSocket)\nconst logicalThenSocket = new Rete.Socket('LogicalThen')\nlogicalThenSocket.combineWith(responsesSocket)\n\nclass ReactBaseComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: this.props.text\n    }\n    this.onUpdate = props.onUpdate\n    if (this.onUpdate === undefined) {\n      this.onUpdate = () => {}\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.text !== this.props.text) {\n      this.setState({ text: this.props.text })\n    } else if (prevState.text !== this.state.text) {\n      this.onUpdate(this.state.text)\n    }\n  }\n\n  render () {\n    return (<React.Fragment>\n        {this.state.label}:\n        <br/>\n        <div className='text-fragment' title={this.state.text}>\n          {this.state.text}\n        </div>\n        <input type='button' value='...' onClick={(e) => this.setState({ text: prompt('Enter Text:', this.state.text) }) } />\n      </React.Fragment>)\n  }\n}\n\nclass ReactStartComponent extends ReactBaseComponent {\n  constructor(props) {\n    super(props)\n    this.state = { label: \"Greeting\" }\n  }\n}\n\nclass ReactResponseComponent extends ReactBaseComponent {\n  constructor(props) {\n    super(props)\n    this.state = { label: 'Player Response'}\n  }\n}\n\nclass ReactSpeechComponent extends ReactBaseComponent {\n  constructor(props) {\n    super(props)\n    this.state = { label: 'NPC Speech'}\n  }\n}\n\nclass ReactEndComponent extends ReactBaseComponent {\n  constructor(props) {\n    super(props)\n    this.state = { label: \"Farewell\" }\n  }\n}\n\nclass ReactConditionComponent extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      conditions: [],\n      selectedCondition: 'has_item',\n      selectedParam: 'exactly',\n      paramNameValue: '',\n      paramQtyValue: 0\n    }\n\n    this.definitions = [\n      {\n        name: \"Has Item\",\n        id: \"has_item\",\n        params: [\n          {name: 'Item Name', id: 'item_name', value: ''},\n          {name: 'Logical Comparison', id: 'comparison', value: 'exactly', values: [\n            {name: '=', id: 'exactly'},\n            {name: '>', id: 'morethan'},\n            {name: '<', id: 'lessthan'},\n            {name: '>=', id: 'morethanorequal'},\n            {name: '<=', id: 'lessthanorequal'},\n            {name: '!=', id: 'notequal'},\n          ]},\n          {name: 'Quantity', id: 'qty'}\n        ]\n      }\n    ]\n  }\n\n  componentDidMount() {\n\n  }\n\n  render () {\n    let options = []\n    for (let id in this.definitions) {\n      let condition = this.definitions[id]\n      let selected = false\n      if (this.state.selectedCondition === condition.id) {\n        selected = true\n      }\n      options.push(<option value={selected}>{condition.name}</option>)\n    }\n\n    let condition = this.definitions.filter(f => f.id === this.state.selectedCondition)\n    let logics = []\n    if (condition.length > 0) {\n      condition = condition[0]\n      let param = condition.params.filter(f => f.id === 'comparison')\n      if (param.length > 0 && param[0].values !== undefined) {\n        param = param[0]\n        for (let id in param.values) {\n          let selected = false\n          if (this.state.selectedParam === param.values[id].id) {\n            selected = true\n          }\n          logics.push(<option value={selected}>{param.values[id].name}</option>)\n        }\n      }\n    }\n    return (<React.Fragment>\n        <select className='condition-name'>{options}</select><input className='condition-param-name' type='text' value={this.state.paramNameValue} onChange={(e) => this.setState({ paramNameValue: e.target.value })} /><br />\n        <select className='condition-logic'>{logics}</select><input type='text' value={this.state.paramQtyValue} className='condition-param-qty' onChange={(e) => this.setState({ paramQtyValue: e.target.value })} />\n      </React.Fragment>)\n  }\n\n}\n\nclass ConversationStartControl extends Rete.Control {\n  constructor(emitter, key, name) {\n    super(key)\n    this.render = 'react'\n    this.component = ReactStartComponent\n    this.props =  { emitter, name, onUpdate: (v) => this.putData(key, v)  }\n  }\n}\n\nclass ConversationEndControl extends Rete.Control {\n  constructor(emitter, key, name) {\n    super(key)\n    this.render = 'react'\n    this.component = ReactEndComponent\n    this.props =  { emitter, name, onUpdate: (v) => this.putData(key, v)  }\n  }\n}\n\nclass ConversationConditionControl extends Rete.Control {\n  constructor(emitter, key, name) {\n    super(key)\n    this.render = 'react'\n    this.component = ReactConditionComponent\n    this.props = { emitter, name }\n  }\n}\n\nclass ConversationResponseControl extends Rete.Control {\n  constructor(emitter, key, name) {\n    super(key)\n    this.render = 'react'\n    this.component = ReactResponseComponent\n    this.props = { emitter, name, onUpdate: (v) => this.putData(key, v) }\n  }\n}\n\nclass ConversationSpeechControl extends Rete.Control {\n  constructor(emitter, key, name) {\n    super(key)\n    this.render = 'react'\n    this.component = ReactSpeechComponent\n    this.props = { emitter, name, onUpdate: (v) => this.putData(key, v)  }\n  }\n}\n\nclass QuestNode extends Node {\n  render() {\n    const { node, bindSocket, bindControl } = this.props;\n    const { outputs, controls, inputs, selected } = this.state;\n\n    return (\n      <div className={`node ${selected}`}>\n        <div className=\"title\">{node.name}</div>\n        {/* Outputs */}\n        {outputs.map((output) => (\n          <div className=\"output\" key={output.key}>\n            <div className=\"output-title\">{output.name}</div>\n            <Socket type=\"output\" socket={output.socket} io={output} innerRef={bindSocket} />\n          </div>\n        ))}\n        {/* Controls */}\n        {controls.map(control => (\n          <Control className=\"control\" key={control.key} control={control} innerRef={bindControl} />\n        ))}\n        {/* Inputs */}\n        {inputs.map(input => (\n          <div className=\"input\" key={input.key}>\n            <Socket type=\"input\" socket={input.socket} io={input} innerRef={bindSocket} />\n            {!input.showControl() && <div className=\"input-title\">{input.name}</div>}\n            {input.showControl() && <Control className=\"input-control\" control={input.control} innerRef={bindControl} />}\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n\nclass ConversationStartComponent extends Rete.Component {\n  constructor() {\n    super('Conversation Start');\n    this.data.component = QuestNode;\n  }\n\n  builder(node) {\n    let out = new Rete.Output('condition', 'Conditions', conditionsSocket);\n    let text = new ConversationStartControl(this.editor, 'text', node)\n    let outThen = new Rete.Output('logicalThen', \"Then\", logicalThenSocket)\n    node.addControl(text).addOutput(out).addOutput(outThen);\n  }\n\n}\n\nclass ConversationEndComponent extends Rete.Component {\n  constructor() {\n    super('Conversation End');\n    this.data.component = QuestNode\n  }\n\n  builder(node) {\n    let input = new Rete.Input('response', 'Response', responsesSocket, true);\n    let inThen = new Rete.Input('condition', \"Conditions\", conditionsSocket)\n    node.addControl(new ConversationEndControl(this.editor, 'text', node))\n    node.addInput(input).addInput(inThen)\n  }\n\n}\n\nclass ConversationConditionsComponent extends Rete.Component {\n  constructor () {\n    super(\"Condition\")\n    this.data.component = QuestNode\n  }\n\n  builder (node) {\n    let input = new Rete.Input(\"conditions\", \"Condition\", conditionsSocket)\n    node.addInput(input)\n\n    let outAnd = new Rete.Output(\"logicalAnd\", \"AND\", logicalAndSocket)\n    let outOr = new Rete.Output(\"logicalOr\", \"OR\", logicalOrSocket)\n    let outThen = new Rete.Output('logicalThen', \"Then\", logicalThenSocket)\n    node.addControl(new ConversationConditionControl(this.editor, 'text', node))\n    node.addOutput(outAnd)\n    node.addOutput(outOr)\n    node.addOutput(outThen)\n  }\n}\n\nclass ConversationResponsesComponent extends Rete.Component {\n  constructor () {\n    super(\"Response\")\n    this.data.component = QuestNode\n  }\n\n  builder (node) {\n    let input = new Rete.Input(\"response\", \"Response\", responsesSocket)\n    node.addInput(input)\n\n    let out = new Rete.Output(\"conditions\", \"Conditions\", conditionsSocket)\n    let outThen = new Rete.Output('logicalThen', \"Then\", logicalThenSocket)\n    node.addOutput(out).addOutput(outThen)\n\n    node.addControl(new ConversationResponseControl(this.editor, 'text', node))\n  }\n\n  worker (node, inputs, output) {\n    output[\"response\"] = node.data.responses\n    \n  }\n}\n\nclass ConversationSpeechComponent extends Rete.Component {\n  constructor () {\n    super(\"Speech\")\n    this.data.component = QuestNode\n  }\n\n  builder (node) {\n    let input = new Rete.Input(\"response\", \"Response\", responsesSocket)\n    node.addInput(input)\n\n    let out = new Rete.Output(\"conditions\", \"Conditions\", conditionsSocket)\n    let outThen = new Rete.Output('logicalThen', \"Then\", logicalThenSocket)\n    node.addOutput(out).addOutput(outThen)\n    node.addControl(new ConversationSpeechControl(this.editor, 'text', node))\n  }\n\n  worker (node, inputs, output) {\n    output[\"response\"] = node.data.responses\n    \n  }\n}\n\nclass App extends Component {\n\n  constructor(props)\n  {\n    super(props)\n\n    this.reteRef = React.createRef()\n\n  }\n\n  componentDidMount () {\n    this.initializeRete()\n  }\n\n  async initializeRete ()\n  { \n    let editor = new Rete.NodeEditor('demo@0.1.0', this.reteRef.current);\n\n    editor.use(ConnectionPlugin)\n    editor.use(ReactRenderPlugin, {\n      component: QuestNode\n    })\n    \n    const startComponent = new ConversationStartComponent();\n    editor.register(startComponent);\n    const responsesComponent = new ConversationResponsesComponent();\n    editor.register(responsesComponent)\n    const conditionsComponent = new ConversationConditionsComponent();\n    editor.register(conditionsComponent)\n    const endComponent = new ConversationEndComponent();\n    editor.register(endComponent)\n    const speechComponent = new ConversationSpeechComponent();\n    editor.register(speechComponent)\n\n    const engine = new Rete.Engine('demo@0.1.0');\n    engine.register(startComponent);\n    engine.register(responsesComponent)\n\n    const startNode = await startComponent.createNode()\n    editor.addNode(startNode)\n    \n    editor.use(ContextMenuPlugin, {\n        searchBar: false,\n        delay: 100,\n        allocate(component) {\n            return ['Submenu']\n        },\n        items: {\n            /*'Click me'(){ console.log('Works!') }*/\n        }\n    });\n\n    editor.on('click', async (e) => {\n      \n    })\n\n    this.editor = editor\n  }\n\n  export() {\n    console.log(this.editor.toJSON())\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Medieval-Quests Editor\n          <br />\n          <input type='button' value='Export' onClick={() => this.export()}/>\n        </header>\n        {<div id=\"rete\" className=\"Rete\" ref={this.reteRef} />}\n      </div>\n\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}